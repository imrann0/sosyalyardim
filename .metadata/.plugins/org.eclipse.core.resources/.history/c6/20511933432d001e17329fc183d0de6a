package com.example.example.DataBase;

import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.JoinColumn;

@Entity
public class District {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int districtID;

    private String districtKod;
    private String ilce;
    private String districtName;

    @ManyToOne
    @JoinColumn(name = "bolge_id")
    private Zone bolge;

    // Getter ve Setter metotlarÄ±

    public int getDistrictID() {
        return districtID;
    }

    public void setDistrictID(int districtID) {
        this.districtID = districtID;
    }

    public String getDistrictKod() {
        return districtKod;
    }

    public void setDistrictKod(String districtKod) {
        this.districtKod = districtKod;
    }

    public String getIlce() {
        return ilce;
    }

    public void setIlce(String ilce) {
        this.ilce = ilce;
    }

    public String getDistrictName() {
        return districtName;
    }

    public void setDistrictName(String districtName) {
        this.districtName = districtName;
    }

    public Zone getBolge() {
        return bolge;
    }

    public void setBolge(Zone bolge) {
        this.bolge = bolge;
    }
    
    public static List<District> getAllDistrict() {
        Configuration configuration = new Configuration().configure();
        SessionFactory sessionFactory = configuration.buildSessionFactory();

        Session session = sessionFactory.openSession();
        session.beginTransaction();

        TypedQuery<District> query = session.createQuery("SELECT d FROM District d", District.class);
        List<District> District = query.getResultList();

        session.getTransaction().commit();
        sessionFactory.close();

        return District;
    }
    
    
    public static Disabled getbyID(int id){
        Configuration configuration = new Configuration().configure();
        SessionFactory sessionFactory = configuration.buildSessionFactory();
        try (Session session = sessionFactory.openSession()) {
            return session.get(Disabled.class, id);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
}
