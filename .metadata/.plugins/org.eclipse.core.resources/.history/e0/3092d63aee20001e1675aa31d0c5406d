package com.example.example;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import java.time.LocalDate;
import java.util.HashSet;
import java.util.Set;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;


@Entity
public class Personel {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    private String name;
    private String surname;
    private String password;
    private String phone;
    private String identity;
    private String mail;
    private String gender;
    private LocalDate date;

    @ManyToMany
    @JoinTable(
        name = "personel_rol",
        joinColumns = @JoinColumn(name = "personel_id"),
        inverseJoinColumns = @JoinColumn(name = "rol_id")
    )
    private Set<Rol> roles = new HashSet<>();

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSurname() {
        return surname;
    }

    public void setSurname(String surname) {
        this.surname = surname;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getIdentity() {
        return identity;
    }

    public void setIdentity(String identity) {
        this.identity = identity;
    }

    public String getMail() {
        return mail;
    }

    public void setMail(String mail) {
        this.mail = mail;
    }

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public LocalDate getDate() {
        return date;
    }

    public void setDate(LocalDate date) {
        this.date = date;
    }

    public Set<Rol> getRoles() {
        return roles;
    }

    public void setRoles(Set<Rol> roles) {
        this.roles = roles;
    }
    
    
    public static Personel getPersonelByUsername(String username) {
        // Implement the logic to retrieve the Personel from the database by username
        // You can use JDBC or an ORM framework like Hibernate to perform the database query
        
        // Example using JDBC:
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        Personel personel = null;

        try {
            connection = DatabaseConnection.baglan();
            String query = "SELECT * FROM personel WHERE mail = ?";
            statement = connection.prepareStatement(query);
            statement.setString(1, username);
            resultSet = statement.executeQuery();

            if (resultSet.next()) {
                personel = new Personel();
                personel.setId(resultSet.getInt("id"));
                personel.setName(resultSet.getString("name"));
                // Set other attributes of the Personel object
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close resources (resultSet, statement, connection) in the reverse order of their creation
            // Handle any potential exceptions while closing resources
        }

        return personel;
    }
}
