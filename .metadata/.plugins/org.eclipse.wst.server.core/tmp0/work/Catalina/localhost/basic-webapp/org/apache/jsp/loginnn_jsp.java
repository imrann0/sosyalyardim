/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.8
 * Generated at: 2023-07-24 13:49:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class loginnn_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!doctype html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <!-- Required meta tags -->\r\n");
      out.write("    <meta charset=\"utf-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\r\n");
      out.write("    <link href=\"https://fonts.googleapis.com/css?family=Roboto:300,400&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"fonts/icomoon/style.css\">\r\n");
      out.write("\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"css/owl.carousel.min.css\">\r\n");
      out.write("\r\n");
      out.write("    <!-- Bootstrap CSS -->\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"css/bootstrap.min.css\">\r\n");
      out.write("\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    <!-- Style -->\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"css/style.css\">\r\n");
      out.write("\r\n");
      out.write("    <title>Ulakbel Giriş</title>\r\n");
      out.write("    <style>\r\n");
      out.write("      .half {\r\n");
      out.write("        margin-bottom: 0; /* Tablonun altındaki boşluğu sıfırlar */\r\n");
      out.write("      }\r\n");
      out.write("      .bg {\r\n");
      out.write("        background-size: cover;\r\n");
      out.write("        background-color: rgb(209, 245, 3);\r\n");
      out.write("        background-position: center;\r\n");
      out.write("        height: 100vh; /* Arka plan resminin yüksekliği ekran yüksekliği kadar olacak */\r\n");
      out.write("        width: 50%; /* Tablonun yarısını kaplayacak */\r\n");
      out.write("        float: left; /* Tablonun yanına yerleştirir */\r\n");
      out.write("      }\r\n");
      out.write("      .contents {\r\n");
      out.write("        background-color: rgb(255, 255, 255);\r\n");
      out.write("        width: 50%; \r\n");
      out.write("        float: left; \r\n");
      out.write("        display: flex; \r\n");
      out.write("        align-items: center; \r\n");
      out.write("      }\r\n");
      out.write("      .login-form {\r\n");
      out.write("        margin: 0 auto; /* Formu yatayda ortalar */\r\n");
      out.write("        max-width: 400px; /* Formun maksimum genişliğini ayarlar */\r\n");
      out.write("      }\r\n");
      out.write("      @media (max-width: 768px) {\r\n");
      out.write("        .bg {\r\n");
      out.write("          display: none; /* Mobil cihazlarda arka plan resmini gizler */\r\n");
      out.write("        }\r\n");
      out.write("        .contents {\r\n");
      out.write("          width: 100%; /* Mobil cihazlarda tablonun tam genişlikte olmasını sağlar */\r\n");
      out.write("        }\r\n");
      out.write("      }\r\n");
      out.write("    </style>\r\n");
      out.write("  </head>\r\n");
      out.write("  <body>\r\n");
      out.write("  \r\n");
      out.write("\r\n");
      out.write("  <div class=\"d-lg-flex half\">\r\n");
      out.write("    <div class=\"bg order-1 order-md-2\" style=\"background-image: url('images/gebz.png');\"></div>\r\n");
      out.write("    <div class=\"contents order-2 order-md-1\">\r\n");
      out.write("\r\n");
      out.write("      <div class=\"container\">\r\n");
      out.write("        <div class=\"row align-items-center justify-content-center\">\r\n");
      out.write("          <div class=\"col-md-7\">\r\n");
      out.write("            <div class=\"mb-4\">\r\n");
      out.write("              <h3 class=\"text-center\">Giriş Yap</h3>\r\n");
      out.write("            </div>\r\n");
      out.write("            <form action=\"#\" method=\"post\" class=\"login-form\">\r\n");
      out.write("              <div class=\"form-group first\">\r\n");
      out.write("                <label for=\"username\"><i class=\"fas fa-envelope\"></i> Email</label>\r\n");
      out.write("                <input type=\"email\" name=\"mail\" class=\"form-control\" id=\"username\">\r\n");
      out.write("\r\n");
      out.write("              </div>\r\n");
      out.write("              <div class=\"form-group last mb-3\">\r\n");
      out.write("                <label for=\"password\"><i class=\"fas fa-lock\"></i> Şifre</label>\r\n");
      out.write("                <input type=\"password\" name=\"password\" class=\"form-control\" id=\"password\">\r\n");
      out.write("                \r\n");
      out.write("              </div>\r\n");
      out.write("              \r\n");
      out.write("              \r\n");
      out.write("\r\n");
      out.write("              <input type=\"submit\" value=\"Giriş\" class=\"btn btn-block btn-primary\">\r\n");
      out.write("              \r\n");
      out.write("              <div class=\"form-group mt-3\">\r\n");
      out.write("                <p class=\"text-center\">Hesabınız yok mu? <a href=\"register.jsp\">Kayıt Ol</a></p>\r\n");
      out.write("              </div>\r\n");
      out.write("              \r\n");
      out.write("            </form>\r\n");
      out.write("          </div>\r\n");
      out.write("        </div>\r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("  </div>\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("    <script src=\"js/jquery-3.3.1.min.js\"></script>\r\n");
      out.write("    <script src=\"js/popper.min.js\"></script>\r\n");
      out.write("    <script src=\"js/bootstrap.min.js\"></script>\r\n");
      out.write("    <script src=\"js/main.js\"></script>\r\n");
      out.write("  </body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
